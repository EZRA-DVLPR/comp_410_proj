After you've implemented the code in sat_solver.pl,
answer the questions below.  This portion is
purely bonus worth up to 15% of the assignment;
you do not need to complete this for full credit.

1.) The SAT solver from assignment 1 used a list, but
    no lists are used in the Prolog-based SAT solver.
    How is this solver able to avoid using lists?




2.) The SAT solver from assignment 1 used a hash table
    (i.e., a mapping) from variables to Boolean values.
    However, no hash tables or maps are used in the
    Prolog-based SAT solver.  How is this solver able
    to avoid using hash tables / maps?




3.) The function you implemented for assignment 1
    returned either a hash table or null, depending
    on whether or not the solver was dealing with
    a satisfiable or unsatisfiable formula.  The
    Prolog-based SAT solver, however, doesn't exactly
    return anything, but it still produces values.
    How is the Prolog-based SAT solver producing values?
    (As a hint, this question is connected to the
    previous question.)




Step-by-Step Instructions
---------------------------
Step 1: Implement a Boolean Expression Evaluator in Prolog
Download boolean_evaluator.pl. 
You will need to implement a recursive evaluator of Boolean expressions in 
this file, much like the evaluator you implemented for Assignment 1. 
This will be implemented via a procedure 
(that is, a combination of facts and rules which have the same name) named eval. 
Note that the representation of the AST has been slightly changed, 
corresponding to a more idiomatic Prolog representation. 
The comments in the file provide more details.

Step 2: Implement a SAT Solver in Prolog
Download sat_solver.pl. You will need to write a procedure 
(that is, a combination of facts and rules which have the same name) 
named isTrue which determines if a given Boolean formula is true. 
This formula has a very similar AST as the one from the SAT solver you 
implemented for Assignment 1, with mostly just changes to make the 
representation a little more idiomatic to Prolog. However, there is one 
key difference: instead of variables in the formula being represented by 
atoms (or symbols for Racket), here we represent the variables using Prolog 
variables (i.e., logical variables). This effectively allows us to “modify”
the formula in-place as we learn information about it 
(i.e., which variables need to be true or false.

Relevant to the aforementioned representation of literals, 
this means the following:

If we have a positive literal, 
the Prolog variable in the literal must be equal to the atom true. 
That is, for a positive literal to be true, its variable must hold the 
value true.

If we have a negative literal, the Prolog variable in the literal must 
be equal to the atom false. That is, for a negative literal to be true, 
its variable must hold the value false, because it is negated.

The comments in the file provide further details.

(OPTIONAL BONUS WORTH +15%) Step 3: Answer Reflection Questions
This may come as a bit of a surprise, but you implemented a 
full tableau-based SAT solver in the previous step. However, 
the code is (hopefully!) a lot simpler than the code you wrote for 
Assignment 1.

Download assign4_questions.txt. 
There are questions in this file which ask you to reflect on your
implementation, in particular with how it compares and contrasts with the 
implementation you wrote for Assignment 1.

