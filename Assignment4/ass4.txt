After you've implemented the code in sat_solver.pl,
answer the questions below.  This portion is
purely bonus worth up to 15% of the assignment;
you do not need to complete this for full credit.

1.) The SAT solver from assignment 1 used a list, but
    no lists are used in the Prolog-based SAT solver.
    How is this solver able to avoid using lists?

Instead of keeping track of the entire structure of the given Expression,
what we implemented was a recursive way to break down the expression down
into 2(3) cases: A literal, or a binary expression being `or` or `and`.

Recursively, we break down the given expression into the LHS and RHS
of the binary expressions(`or`, `and`) which reduces the complexity of
structure given in the recursive call. Eventually, this breaking apart must
lead into a case where there is a literal. When a literal is encountered,
a value is returned, true or false, which returns to the parent
recursive call. This evaluation trickles upwards until a binary operator,
which will decide if it needs to evaluate the other side or not. This 
binary operator returns a true/false value based on the constituent parts.
This unwinding process repeats until there are no more recursive calls,
yielding an answer to the initial given expression without the need for lists.

TL;DR
Recursively break down the expression into smaller expressions and evaluate
them. Once unable to break it down further, return the values alleviating
the recursive stack.



2.) The SAT solver from assignment 1 used a hash table
    (i.e., a mapping) from variables to Boolean values.
    However, no hash tables or maps are used in the
    Prolog-based SAT solver.  How is this solver able
    to avoid using hash tables / maps?

This SAT Solver was able to use the fact that Prolog returns true/false values
based on given queries, rules, etc. Instead of mapping a literal to a boolean
value, we defined the literal to have arity 2, with the first parameter
indicating the label, and the second parameter to indicate the 
positive/negative sign associated with the literal. When the literal is checked
against the defined rule, it either unifies and returns true, or fails to unify
indicating a false.



3.) The function you implemented for assignment 1
    returned either a hash table or null, depending
    on whether or not the solver was dealing with
    a satisfiable or unsatisfiable formula.  The
    Prolog-based SAT solver, however, doesn't exactly
    return anything, but it still produces values.
    How is the Prolog-based SAT solver producing values?
    (As a hint, this question is connected to the
    previous question.)

Unification with the variables indicates that it was true. Using this as a
basis, we are able to extrapolate that the recursive calls are being evaluated
i.e. producing values. If we trace the process that occurs when we run each
expression on the SAT Solver, we can explicitly see the unification and
recursive process in action, at each step. A value is guaranteed to be returned,
because there are only 2 options: Unify, or Don't Unify, i.e. true or false.
This ideology applies not only to the given expression, but to all subsequent
calls to the sub-expressions.